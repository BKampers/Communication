/*
 * Copyright Â© Bart Kampers
 */
package bka.communication.graph;

import bka.communication.json.*;
import bka.graph.swing.*;
import bka.swing.chart.*;
import bka.swing.chart.custom.*;
import bka.swing.chart.render.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.logging.*;
import org.json.*;

/**
 *
 * @author bartk
 */
public class HistogramPanel extends bka.graph.swing.AbstractEditPanel {


    public HistogramPanel(TerminalVertex vertex) {
        this.terminalVertex = vertex;
        initComponents();
        chartPlaceholder.add(chartPanel);
        chartPanel.setGraphs(graphs);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chartPlaceholder = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        chartPlaceholder.setLocation(new java.awt.Point(0, 0));
        chartPlaceholder.setPreferredSize(new java.awt.Dimension(600, 600));
        chartPlaceholder.setSize(new java.awt.Dimension(600, 600));
        chartPlaceholder.setLayout(new javax.swing.BoxLayout(chartPlaceholder, javax.swing.BoxLayout.LINE_AXIS));
        add(chartPlaceholder, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents



    @Override
    public void confirm() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }


    @Override
    public void setEditDialog(EditDialog editDialog) {
        super.setEditDialog(editDialog);
        editDialog.addWindowListener(new EditDialogListener());
  }


    private Transporter getTransporter() {
        return (terminalVertex != null) ? terminalVertex.getTransporter() : null;
    }


    private boolean transporterAvailable() {
        return getTransporter() != null;
    }


    private class ReceiverTask implements Runnable {

        @Override
        public void run() {
            while (transporterAvailable()) {
                try {
                    JSONObject received = getTransporter().nextReceivedObject();
                    if ("Return".equals(received.getString("Direction"))) {
                        String function = received.getString("Function");
                        switch (function) {
                            case "startLogging": {
                                if (timer == null) {
                                    timer = new Timer("HistogramTimer");
                                    timer.schedule(new HistogramTask(), 1000, 2000);
                                }
                            } break;
                            case "getMeasurements": {
                                JSONObject returnValue = received.getJSONObject("ReturnValue");
                                JSONArray measurements = returnValue.getJSONArray("Measurements");
                                for (int m = 0; m < measurements.length(); ++m) {
                                    JSONObject measurement = measurements.getJSONObject(m);
                                    long timestamp = measurement.getLong("Timestamp");
                                    JSONArray values = measurement.getJSONArray("Values");
                                    for (int v = 0; v < 1/*values.length()*/; ++v) {
                                        Map<Number, Number> graph = graphs.get(v);
                                        if (graph == null) {
                                            graph = new HashMap<>();
                                            graphs.put(v, graph);
                                            chartPanel.setRenderer(v, createRenderer(v));
                                        }
                                        double value = values.getDouble(v);
                                        graph.put(timestamp, value);
                                    }
                                }
                                chartPanel.setGraphs(graphs);
                                chartPanel.repaint();
                            } break;
                            default: {
                                Logger.getLogger(JsonTerminal.class.getName()).log(Level.INFO, "Function: {0}", function);
                            }
                        }
                    }
                    else {
                        Logger.getLogger(JsonTerminal.class.getName()).log(Level.INFO, "received: {0}", received);
                    }
                }
                catch (InterruptedException | JSONException ex) {
                    Logger.getLogger(JsonTerminal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }


    private static AbstractDataAreaRenderer createRenderer(int key) {
        return new DefaultLineRenderer(LineLooks.create(PALETTE[key % PALETTE.length]));
    }


    private class HistogramTask extends TimerTask {

        @Override
        public void run() {
            try {
                Transporter transporter = getTransporter();
                if (transporter != null) {
                    transporter.send(new JSONObject("{Direction:Call,Function:getMeasurements}"));
                }
            }
            catch (JSONException ex) {
                Logger.getLogger(HistogramPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }


    private class EditDialogListener implements WindowListener {

        @Override
        public void windowOpened(WindowEvent e) {
            receiverThread = new Thread(new ReceiverTask());
            receiverThread.start();
            try {
                Transporter transporter = getTransporter();
                if (transporter != null) {
                    transporter.send(new JSONObject("{Direction:Call,Function:startLogging,Parameters:{Interval:1000}}"));
                }
            }
            catch (JSONException ex) {
                Logger.getLogger(HistogramPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void windowClosing(WindowEvent e) {
        }

        @Override
        public void windowClosed(WindowEvent e) {
        }

        @Override
        public void windowIconified(WindowEvent e) {
        }

        @Override
        public void windowDeiconified(WindowEvent e) {
        }

        @Override
        public void windowActivated(WindowEvent e) {
        }

        @Override
        public void windowDeactivated(WindowEvent e) {
        }

    }


    private final TerminalVertex terminalVertex;

    private Thread receiverThread;
    private Timer timer;

    private final Map<Object, Map<Number, Number>> graphs = new HashMap();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartPlaceholder;
    // End of variables declaration//GEN-END:variables

    private final ChartPanel chartPanel = new ChartPanel();

    private static final Color[] PALETTE = { Color.BLUE, Color.RED, Color.GREEN, Color.CYAN, Color.PINK, Color.MAGENTA };

}
