/*
** Copyright Â© Bart Kampers
*/

package communication.swing;

import bka.communication.*;
import bka.communication.json.*;
import java.util.*;
import java.util.logging.*;
import jssc.*;
import org.json.*;


public class MessengerTester extends bka.swing.FrameApplication {

    public MessengerTester() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        channelComboBox = new javax.swing.JComboBox<>();
        tabbedPane = new javax.swing.JTabbedPane();
        logPanel = new javax.swing.JPanel();
        messageScrollPane = new javax.swing.JScrollPane();
        messageList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        channelComboBox.setSelectedItem(null);
        channelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelComboBox_actionPerformed(evt);
            }
        });
        getContentPane().add(channelComboBox, java.awt.BorderLayout.PAGE_START);

        messageList.setModel(new MessageListModel());
        messageScrollPane.setViewportView(messageList);

        logPanel.add(messageScrollPane);

        tabbedPane.addTab("tab1", logPanel);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void channelComboBox_actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelComboBox_actionPerformed
        Object selectedItem = channelComboBox.getSelectedItem();
        if (selectedItem == null) {
            disconnect();
        }
        else {
            if (! (selectedItem instanceof Channel)) {
                String host = selectedItem.toString();
                Collection<String> hosts = (Collection<String>) getSetting(SOCKET_HOSTS);
                if (hosts == null) {
                    hosts = new ArrayList<>();
                    setSetting(SOCKET_HOSTS, hosts);
                }
                if (! hosts.contains(host)) {
                    hosts.add(host);
                }
                selectedItem = SocketChannel.create(selectedItem.toString(), DEFAULT_PORT);
            }
            if (selectedItem != selectedChannel) {
                disconnect();
                connect((Channel) selectedItem);
            }
        }

    }//GEN-LAST:event_channelComboBox_actionPerformed


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MessengerTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MessengerTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MessengerTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MessengerTester.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MessengerTester().setVisible(true);
            }
        });
    }


    @Override
    public String manufacturerName() {
        return "BKA";
    }


    @Override
    public String applicationName() {
        return "MessengerTester";
    }


    @Override
    protected void opened() {
        channelComboBox.setEditable(getBooleanProperty(DEVELOPER_MODE, false));
        populateChannelComboBox();
        selectStoredChannel();
    }


    private void populateChannelComboBox() {
        channelComboBox.addItem(null);
        for (String portName: SerialPortList.getPortNames()) {
            JsscChannel channel = JsscChannel.create(portName, DEFAULT_BAUDRATE);
            channelComboBox.addItem(channel);
        }
        Collection<String> socketHosts = (Collection<String>) getSetting(SOCKET_HOSTS);
        if (socketHosts != null) {
            for (String host : socketHosts) {
                channelComboBox.addItem(SocketChannel.create(host, DEFAULT_PORT));
            }
        }
    }


    private void selectStoredChannel() {
        String channelName = getProperty(SELECTED_CHANNEL);
        if (channelName != null) {
            int i = 0;
            while (selectedChannel == null && i < channelComboBox.getItemCount()) {
                Object comboBoxItem = channelComboBox.getItemAt(i);
                if (comboBoxItem.toString().equals(channelName)) {
                    channelComboBox.setSelectedItem(comboBoxItem);
                }
                i++;
            }
        }
    }


    private void disconnect() {
        if (transporter != null) {
            try {
                transporter.close();
            }
            catch (ChannelException ex) {
                Logger.getLogger(MessengerTester.class.getName()).log(Level.SEVERE, null, ex);
            }
            transporter = null;
        }
        selectedChannel = null;
        setProperty(SELECTED_CHANNEL, null);
    }


    private void connect(Channel channel) {
        selectedChannel = channel;
        transporter = new Transporter(channel, '\n', applicationName());
        setProperty(SELECTED_CHANNEL, transporter.getName());
        Thread thread = new Thread(new ReceiverTask(), "ReceiverThread");
        thread.start();
        try {
            transporter.open();
            transporter.send(new JSONObject("{\"Direction\":\"Call\",\"Function\":\"getApplicationName\"}"));
        }
        catch (ChannelException | JSONException ex) {
            Logger.getLogger(MessengerTester.class.getName()).log(Level.WARNING, "connect", ex);
        }
    }


    private boolean connected() {
        return transporter != null;
    }


    private class MessageListModel extends javax.swing.DefaultListModel {

    }


    private class ReceiverTask implements Runnable {

        @Override
        public void run() {
            while (connected()) {
                JSONObject received;
                try {
                    received = transporter.nextReceivedObject();
                    Logger.getLogger(MessengerTester.class.getName()).log(Level.FINEST, received.toString());
                }
                catch (InterruptedException ex) {
                    Logger.getLogger(MessengerTester.class.getName()).log(Level.WARNING, "ReceiverTask", ex);
                }
            }
        }

    }


    private Channel selectedChannel;
    private Transporter transporter;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Channel> channelComboBox;
    private javax.swing.JPanel logPanel;
    private javax.swing.JList<String> messageList;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables


    private static final int DEFAULT_BAUDRATE = 115200;
    private static final int DEFAULT_PORT = 2016;

    private static final String DEVELOPER_MODE = "DeveloperMode";
    private static final String SOCKET_HOSTS = "SocketChannels";
    private static final String SELECTED_CHANNEL = "SelectedChannel";


}
